version: v1
name: wf-b2bdata-quality
type: workflow
tags:
  - dataos.ott
description: The job performs metrics calculations and checks on b2bdata data
workflow:
  title: Metrics and checks
  dag:
    - name: ott-b2bdata-quality
      title: Metrics and checks
      description: The job performs metrics calculations and checks on b2bdata data
      spec:
        stack: flare:3.0
        compute: runnable-default
        tags:
          - dataos.ott
        title: Metrics and checks
        description: The job performs metrics calculations and checks on b2bdata data
        flare:
          job:
            explain: true
            logLevel: INFO
            inputs:
              - name: ott_b2bdata
                dataset: dataos://icebase:telecom_ottchurn/ott_b2bdata
                format: iceberg
            assertions: 

#Verify whether the value of Customer ID is Unique in database

              - sql: |
                    SELECT
                      count(customer_id) count_customer_id
                    FROM
                      ott_b2bdata
                    GROUP BY
                      customer_id
                test: 
                  - count_customer_id == 1

#Verify whether the value of the Customer ID is NOT NULL in the database

              - sql: |
                    SELECT
                    count(customer_id) as customer
                    FROM
                    ott_b2bdata
                    WHERE
                    customer_id IS NULL
                tests: 
                  - customer == 0 
#Verify whether the value of Device ID is Unique in database

              - sql: |
                    SELECT
                      count(device_id) count_device_id
                    FROM
                      ott_b2bdata
                    GROUP BY
                      device_id
                test: 
                  - count_device_id == 1
              
#Verify whether the value of the Device ID is NOT NULL in the database

              - sql: |
                    SELECT
                    count(device_id) as device
                    FROM
                    ott_b2bdata
                    WHERE
                    device_id IS NULL
                tests: 
                  - device == 0 

#Verify whether the value of Partner ID  is Unique in database

              - sql:
                    SELECT 
                      count(partner_id) count_partner_id
                    FROM 
                      ott_b2bdata
                    GROUP BY
                      partner_id
                test:
                  -count_device_id == 1

#Verify whether the value of the Partner ID is NOT NULL in the database

              - sql: |
                    SELECT
                    count(partner_id) as partner
                    FROM
                    ott_b2bdata
                    WHERE
                    partner_id IS NULL
                tests: 
                  - partner == 0 
#Verify whether the value of Asset ID  is Unique in database
              - sql:
                    SELECT 
                      count(asset_id) count_asset_id
                    FROM
                      ott_b2bdata
                    GROUP BY 
                      asset_id

                test:
                  -count_device_id == 1 

#Verify whether the value of the Asset ID is NOT NULL in the database

              - sql: |
                    SELECT
                    count(asset_id) as asset
                    FROM
                    ott_b2bdata
                    WHERE
                    asset_id IS NULL
                tests: 
                  - asset == 0 

#Verify whether the value of the Premium Content in the data base is either Yes or NO 

              - sql: |
                    SELECT
                    CASE
                    WHEN premium_content IN ('Yes','No') THEN 1
                    ELSE 0
                    END premium
                    FROM
                    ott_b2bdata
                    GROUP BY
                    1
                    ORDER BY
                    1
                tests: 
                  - premium == 1

          sparkConf:
            - spark.serializer: org.apache.spark.serializer.KryoSerializer
            - spark.sql.shuffle.partitions: "10"
            - spark.memory.storageFraction: "0.1"
            - spark.memory.fraction: "0.1"
            - spark.shuffle.memoryFraction: "0.2"